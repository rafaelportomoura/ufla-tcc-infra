AWSTemplateFormatVersion: "2010-09-09"
Description: Template for VPC with 2 private and 2 public subnets

Parameters:
  Stage:
    Type: String
    AllowedValues: [dev, qa, hml, prod]
  Tenant:
    Type: String
  # VPC PARAMS
  VpcCidr:
    Type: String
    AllowedPattern: ^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9])\/([0-9]|[1][0-9]|[2][0-9]|[3][0-2])$
    Description: vpc ip range

  # [PRIVATE] a
  PrivateSubnetACidr:
    Type: String
    AllowedPattern: ^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9])\/([0-9]|[1][0-9]|[2][0-9]|[3][0-2])$
    Description: private-subnet-a ip range

  # [PRIVATE] b
  PrivateSubnetBCidr:
    Type: String
    AllowedPattern: ^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9])\/([0-9]|[1][0-9]|[2][0-9]|[3][0-2])$
    Description: private-subnet-b ip range

  # [PUBLIC] a
  PublicSubnetACidr:
    Type: String
    AllowedPattern: ^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9])\/([0-9]|[1][0-9]|[2][0-9]|[3][0-2])$
    Description: public-subnet-a ip range

  # [PUBLIC] b
  PublicSubnetBCidr:
    Type: String
    AllowedPattern: ^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[0-9])\/([0-9]|[1][0-9]|[2][0-9]|[3][0-2])$
    Description: public-subnet-b ip range

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Service
          Value: VPC
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-vpc"

  # -----------------------------------------------------------
  # ACL
  # -----------------------------------------------------------
  ACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Service
          Value: ACL
        - Key: Name
          Value: !Sub "$${Stage}-${Tenant}-acl"

  AclInBoundICMPRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ACL
      Icmp:
        Code: -1
        Type: -1
      Protocol: 1
      RuleAction: allow
      Egress: false
      RuleNumber: 100
      CidrBlock: 0.0.0.0/0

  AclOutBoundICMPRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ACL
      Icmp:
        Code: -1
        Type: -1
      Protocol: 1
      RuleAction: allow
      Egress: true
      RuleNumber: 100
      CidrBlock: 0.0.0.0/0

  AclInBoundSSHRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ACL
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      Egress: false
      RuleNumber: 200
      CidrBlock: 0.0.0.0/0

  AclOutBoundSSHRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ACL
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      Egress: true
      RuleNumber: 200
      CidrBlock: 0.0.0.0/0

  AclInBoundGatewayRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ACL
      Protocol: 6
      PortRange:
        From: 0
        To: 65535
      RuleAction: allow
      Egress: false
      RuleNumber: 300
      CidrBlock: 0.0.0.0/0

  AclOutBoundGatewayRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ACL
      Protocol: 6
      PortRange:
        From: 0
        To: 65535
      RuleAction: allow
      Egress: true
      RuleNumber: 300
      CidrBlock: 0.0.0.0/0

  # --------------------------------------------------------------------------------
  # PRIVATE Route Table definition
  # --------------------------------------------------------------------------------

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Service
          Value: RouteTable
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-private-route-table"
      VpcId: !Ref VPC

  # --------------------------------------------------------------------------------
  # PRIVATE Subnet A
  # --------------------------------------------------------------------------------

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetACidr
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref VPC
      Tags:
        - Key: Service
          Value: Subnet
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-private-subnet-a"

  PrivateSubnetAAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref ACL
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  # --------------------------------------------------------------------------------
  # PRIVATE Subnet B
  # --------------------------------------------------------------------------------

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetBCidr
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref VPC
      Tags:
        - Key: Service
          Value: Subnet
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-private-subnet-b"

  PrivateSubnetBAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref ACL
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # --------------------------------------------------------------------------------
  # PUBLIC Route Table definition
  # --------------------------------------------------------------------------------

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Service
          Value: RouteTable
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-public-route-table"
      VpcId: !Ref VPC

  # --------------------------------------------------------------------------------
  # PUBLIC Subnet A
  # --------------------------------------------------------------------------------

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetACidr
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Service
          Value: Subnet
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-public-subnet-a"

  PublicSubnetAAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref ACL
      SubnetId: !Ref PublicSubnetA

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  # --------------------------------------------------------------------------------
  # PUBLIC Subnet B
  # --------------------------------------------------------------------------------

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBCidr
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Service
          Value: Subnet
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-public-subnet-b"

  PublicSubnetBAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref ACL
      SubnetId: !Ref PublicSubnetB

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # --------------------------------------------------------------------------------
  # Internet Gateway
  # --------------------------------------------------------------------------------

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Service
          Value: InternetGateway
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-igw"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # -------------------------------
  # SECURITY GROUPS DAS PUBLIC SUBNETS
  # -------------------------------

  PublicSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private subnet security group
      VpcId: !Ref VPC
      Tags:
        - Key: Service
          Value: SG
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-public-subnet-sg"

  PublicSubnetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other resources in the same security group
      CidrIp: "0.0.0.0/0"
      IpProtocol: -1
      GroupId: !Ref PublicSubnetSecurityGroup

  # -------------------------------
  # SECURITY GROUPS DAS PRIVATE SUBNETS
  # -------------------------------

  PrivateSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private subnet security group
      VpcId: !Ref VPC
      Tags:
        - Key: Service
          Value: SG
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-private-subnet-sg"

  PrivateSubnetSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other resources in the same security group
      GroupId: !Ref PrivateSubnetSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PrivateSubnetSecurityGroup

  PrivateSubnetSecurityGroupIngressFromPublicSubnet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from public subnet
      GroupId: !Ref PrivateSubnetSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicSubnetSecurityGroup

  # -------------------------------
  # VPC GATEWAY ENDPOINTS
  # -------------------------------

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      PolicyDocument:
        {
          "Id": "Policy",
          "Version": "2012-10-17",
          "Statement":
            [
              {
                "Sid": "Statement",
                "Action": "s3:*",
                "Effect": "Allow",
                "Resource": "*",
                "Principal": "*",
              },
            ],
        }

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC
      PolicyDocument:
        {
          "Id": "Policy",
          "Version": "2012-10-17",
          "Statement":
            [
              {
                "Sid": "Statement",
                "Action": "dynamodb:*",
                "Effect": "Allow",
                "Resource": !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:*",
                "Principal": "*",
              },
            ],
        }

Outputs:
  VpcId:
    Description: The vpc id
    Value: !Ref VPC
    Export:
      Name: !Sub ${Stage}-${Tenant}-vpc-id

  VpcCidrBlock:
    Description: The vpc ip range
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub ${Stage}-${Tenant}-vpc-cidr

  PublicSubnets:
    Description: A list of public subnets
    Value: !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Sub ${Stage}-${Tenant}-public-subnets-list

  PublicRouteTableId:
    Description: Public route table id
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${Stage}-${Tenant}-public-route-table-id

  PublicSubnetSecurityGroupId:
    Description: Public security group id
    Value: !GetAtt PublicSubnetSecurityGroup.GroupId
    Export:
      Name: !Sub ${Stage}-${Tenant}-public-subnet-security-group-id

  PrivateSubnets:
    Description: A list of private subnets
    Value: !Join [",", [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Sub ${Stage}-${Tenant}-private-subnets-list

  PrivateRouteTableId:
    Description: Private route table id
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${Stage}-${Tenant}-private-route-table-id

  PrivateSubnetSecurityGroupId:
    Description: Private security group id
    Value: !GetAtt PrivateSubnetSecurityGroup.GroupId
    Export:
      Name: !Sub ${Stage}-${Tenant}-private-subnet-security-group-id