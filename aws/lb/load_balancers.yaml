
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    VpcId:
        Type: AWS::EC2::VPC::Id
        Description: Id of VPC for EC2
    SubnetIdList:
        Type: List<AWS::EC2::Subnet::Id>
        Description: VPC subnets list
    HasPrivateSubnet:
        Type: String
        AllowedValues:
          - true
          - false
        Default: false
Conditions:
    IsPrivateSubnet: !Equals [!Ref HasPrivateSubnet, true]

Resources:
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub ${Stage}-${Tenant}-lb
            LoadBalancerAttributes:
              - Key: idle_timeout.timeout_seconds
                Value: '60'
            Scheme: !If
              - IsPrivateSubnet
              - internal
              - internet-facing
            SecurityGroups:
              - !Ref LBSecurityGroup
            Subnets: !Ref SubnetIdList
            Tags:
              - Key: Service
                Value: ElasticLoadBalancingV2
              - Key: Resource
                Value: LoadBalancer
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-application-load-balancer-alb
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to client host
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            Tags:
              - Key: Service
                Value: VPC
              - Key: Resource
                Value: SecurityGroup
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-application-load-balancer-alb-sg
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    ListenerHTTP:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
              - Type: fixed-response
                FixedResponseConfig:
                    StatusCode: 404
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP


    PrivateSubnetSecurityGroupIngressFromLBSecurityGroup:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from public subnet
            GroupId: {"Fn::ImportValue": !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"}
            IpProtocol: -1
            SourceSecurityGroupId: !Ref LBSecurityGroup



Outputs:
    LoadBalancerArn:
        Description: The ARN of the load balancer
        Value: !Ref LoadBalancer
        Export:
            Name: !Sub ${Stage}-${Tenant}-application-load-balancer-arn

    LoadBalancerDNSName:
        Description: The DNS name of the load balancer
        Value: !GetAtt LoadBalancer.DNSName
        Export:
            Name: !Sub ${Stage}-${Tenant}-application-load-balancer-dns-name

    LoadBalancerSecurityGroup:
        Description: The security group of the load balancer
        Value: !GetAtt LBSecurityGroup.GroupId
        Export:
            Name: !Sub ${Stage}-${Tenant}-application-load-balancer-sg

    ListenerHTTP:
        Description: The HTTP listener
        Value: !Ref ListenerHTTP
        Export:
            Name: !Sub ${Stage}-${Tenant}-application-load-balancer-listener-arn
